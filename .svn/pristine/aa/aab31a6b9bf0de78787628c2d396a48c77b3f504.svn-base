package com.sendinfo.facestandard.linetake.module.custom;

import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.sendinfo.facestandard.linetake.R;
import com.sendinfo.facestandard.linetake.util.klog.KLog;

public class TitleTopState extends LinearLayout {

    private Context mContext;

    private TextView printNumber;
    private TextView time;
    private ImageView back;
    private ImageView sign;
    private TextView djTime;

    public TitleTopState(Context context) {
        super(context);
        initView(context);
    }

    public TitleTopState(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        initView(context);
    }

    private void initView(Context context) {
        this.mContext = context;
        View rootView = LayoutInflater.from(context).inflate(R.layout.title_top_state, this);
        printNumber = (TextView) rootView.findViewById(R.id.printNumber);
        time = (TextView) rootView.findViewById(R.id.time);
        back = (ImageView) rootView.findViewById(R.id.back);
        sign = (ImageView) rootView.findViewById(R.id.sign);
        djTime = (TextView) rootView.findViewById(R.id.djTime);

        back.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                ((Activity) mContext).finish();
            }
        });
    }

    /**
     * 返回按钮事件
     */
    public void setLeftClick(OnClickListener listener) {
        back.setOnClickListener(listener);
    }

    /**
     * 倒计时
     */
    OnDoubleClickListener onDoubleClickListener;
    int startTime = 30;
    int hrTime = 30;
    boolean isFinish = true;//true销毁页面,false不销毁
    Handler handler = new Handler();
    Runnable runnable = new Runnable() {
        @Override
        public void run() {
            if (hrTime <= 0) {
                KLog.d("倒计时完成 关闭页面");
                if (onDoubleClickListener != null) {
                    onDoubleClickListener.onDoubleClick();
                }
                if (isFinish) {
                    ((Activity) mContext).finish();
                }
            } else {
                hrTime = hrTime - 1;
                time.setText(String.valueOf(hrTime));
                handler.postDelayed(runnable, 1000);
            }
        }
    };

    public void reset() {
        hrTime = startTime;
    }

    public void stopTimer() {
        handler.removeCallbacks(runnable);
    }

    public void startTimer() {
        this.startTimer(30000);
    }

    public void startTimer(int millisInFuture) {
        this.startTimer(millisInFuture, null);
    }

    public void startTimer(int millisInFuture, OnDoubleClickListener onDoubleClickListener) {
        this.onDoubleClickListener = onDoubleClickListener;
        isFinish = true;
        hrTime = (millisInFuture / 1000);
        startTime = (millisInFuture / 1000);
        handler.postDelayed(runnable, 1000);
    }

    public void startTimers(int millisInFuture, OnDoubleClickListener onDoubleClickListener) {
        this.onDoubleClickListener = onDoubleClickListener;
        isFinish = false;
        hrTime = (millisInFuture / 1000);
        startTime = (millisInFuture / 1000);
        handler.postDelayed(runnable, 1000);
    }

    /**
     * 隐藏返回按钮
     */
    public void hideBack() {
        back.setVisibility(View.GONE);
    }

    /**
     * 显示返回按钮
     */
    public void showBack() {
        back.setVisibility(View.VISIBLE);
    }

    /**
     * 隐藏倒计时
     */
    public void hideTime() {
        djTime.setVisibility(View.GONE);
        time.setVisibility(View.GONE);
    }

    /**
     * 设置剩余张数
     */
    public void setPrintNumber(int number) {
        printNumber.setText(number + " 张");
    }

    /**
     * 设置图片
     */
    public void setSignIv(int resource) {
        sign.setVisibility(View.VISIBLE);
        sign.setImageResource(resource);
    }

    @Override
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        KLog.d("onDetachedFromWindow");
        stopTimer();
        handler.removeCallbacksAndMessages(null);
    }

}
