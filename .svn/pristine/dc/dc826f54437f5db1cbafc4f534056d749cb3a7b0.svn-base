package com.sendinfo.facestandard.linetake.module;

import android.Manifest;
import android.content.Intent;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;

import com.aibee.auth.AibeeAuth;
import com.baoyz.widget.PullRefreshLayout;
import com.blankj.utilcode.util.ActivityUtils;
import com.blankj.utilcode.util.LogUtils;
import com.blankj.utilcode.util.SPUtils;
import com.blankj.utilcode.util.StringUtils;
import com.google.gson.reflect.TypeToken;
import com.sendinfo.facestandard.linetake.R;
import com.sendinfo.facestandard.linetake.base.BaseMVPActivity;
import com.sendinfo.facestandard.linetake.base.MyApplication;
import com.sendinfo.facestandard.linetake.bean.DataResponse;
import com.sendinfo.facestandard.linetake.bean.PTTicketInfoVo;
import com.sendinfo.facestandard.linetake.bean.TicketM;
import com.sendinfo.facestandard.linetake.module.adapter.TicketAdapter;
import com.sendinfo.facestandard.linetake.module.common.LoginActivity;
import com.sendinfo.facestandard.linetake.module.common.ScanActivity;
import com.sendinfo.facestandard.linetake.module.common.SettingActivity;
import com.sendinfo.facestandard.linetake.mvp.BaseResponse;
import com.sendinfo.facestandard.linetake.mvp.CommonP;
import com.sendinfo.facestandard.linetake.mvp.HttpDto;
import com.sendinfo.facestandard.linetake.mvp.ICommonView;
import com.sendinfo.facestandard.linetake.util.Constraint;
import com.sendinfo.facestandard.linetake.util.JsonUtil.JsonUtil;
import com.sendinfo.facestandard.linetake.util.other.EventBusFactory;
import com.sendinfo.facestandard.linetake.widget.MyTopNavBar;

import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;
import org.json.JSONException;
import org.json.JSONObject;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import butterknife.BindView;
import butterknife.OnClick;

/**
 * 310105198210112112 查询订单用
 */
public class MainActivity extends BaseMVPActivity<CommonP> implements ICommonView {

    private static final String IDCARD = "0";
    private static final String BARCODE = "1";


    @BindView(R.id.top_bar)
    MyTopNavBar navBar;

    @BindView(R.id.receive_view)
    RecyclerView recyclerView;

    @BindView(R.id.search_et)
    EditText searchEt;

    @BindView(R.id.pull_refresh)
    PullRefreshLayout pullRefreshLayout;

    private MyApplication myApplication;


    private TicketAdapter ticketAdapter;

    private String type;
    private String barCode;
    private String idCard;
    private View noDataView;
    private String allCode;


    @Override
    protected void initArgs(Intent intent) {

    }

    @Override
    protected void onResume() {

        super.onResume();
        //test
//        this.type = BARCODE;
//        this.barCode = "ET181213000105324123";
        sendRequest();

        if (!myApplication.isFaceAuthSuccess){
            applyFaceService();
        }

    }

    @Override
    protected void initView() {


        checkPermission((permission)->{},Manifest.permission.READ_PHONE_STATE,Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE,Manifest.permission.CAMERA);

        myApplication = getAppApplication();
        mPresenter = new CommonP(this);

        confitStatusBar();
        ticketAdapter = new TicketAdapter(R.layout.ticket_item_layout);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(ticketAdapter);

        ticketAdapter.setOnItemClickListener((adapter, view, position) -> {

            if (isFastClick())return;

            PTTicketInfoVo ticketM = (PTTicketInfoVo) adapter.getData().get(position);
            startActivity(new Intent(MainActivity.this, TicketDetailActivity.class));
            EventBusFactory.getBus().postSticky(ticketM);


        });

        noDataView = getLayoutInflater().inflate(R.layout.empty_view,(ViewGroup)recyclerView.getParent(),false);

        pullRefreshLayout.setRefreshing(true);
        sendRequest();
        pullRefreshLayout.setOnRefreshListener(() -> sendRequest());

    }


    @Override
    protected void initData() {

    }

    @Override
    protected int getLayoutId() {

        return R.layout.activity_main;
    }

    @Override
    public void Success(BaseResponse response) {


        pullRefreshLayout.setRefreshing(false);

        if (!"1".equals(response.getCode())){

            showErrorDialog(response.getResult());
            return;
        }


        try {

            JSONObject jsonObject = new JSONObject(JsonUtil.getJsonString(response.getData()));
            PTTicketInfoVo ticketInfoVo = JsonUtil.getObject(jsonObject.toString(), PTTicketInfoVo.class);

            List<PTTicketInfoVo>datas = new ArrayList<>();
            datas.add(ticketInfoVo);
            ticketAdapter.reloadData(datas);

            if (datas.size()==0){

                ticketAdapter.setEmptyView(noDataView);

            }


        } catch (JSONException e) {

            e.printStackTrace();
        }

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == 200 && data != null) {

            this.type = BARCODE;
            barCode = data.getStringExtra("barCode");
            allCode = data.getStringExtra("allCode");
           // sendRequest();
        }
    }


    @OnClick({R.id.mTvSearch, R.id.setting_icon,R.id.mTvYearCard})
    public void clickView(View view) {

        if (view.getId() == R.id.mTvSearch) {

            hideKeyBoard();

            this.type = BARCODE;
            barCode = searchEt.getText().toString().trim();
            allCode = searchEt.getText().toString().trim();

            sendRequest();

        } else if (view.getId() == R.id.setting_icon) {

            ActivityUtils.startActivity(SettingActivity.class);

        }else if(view.getId() == R.id.mTvYearCard){

            ActivityUtils.startActivity(CameraActivityNew.class);

        }
    }

    private long mExitTime;

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {

        if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {

            exit();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    @Subscribe(threadMode = ThreadMode.MAIN, sticky = true)
    public void onEvent(String msg) {

        pullRefreshLayout.setRefreshing(false);
        showWarnDialog("网络异常，请重新输入身份证或扫码查询");
        EventBusFactory.getBus().removeStickyEvent(msg);
    }

    private void confitStatusBar() {
        navBar.setBackClickListener(v -> finish());

        navBar.setRightIcon(R.mipmap.scan);
        navBar.setRightClickListener(v -> {

            idCard = "";
            searchEt.setText("");
            ActivityUtils.startActivityForResult(MainActivity.this, ScanActivity.class, 200);

        });

    }

    private void sendRequest() {

        pullRefreshLayout.setRefreshing(true);
        if (StringUtils.isEmpty(barCode)) {

            pullRefreshLayout.setRefreshing(false);
            showWarnDialog("请输入票型码或扫码查询");
            return;
        }

        HttpDto httpDto = new HttpDto(Constraint.PUTUO_QUERYTICKET,true);
        httpDto.setRequestMethod(HttpDto.GET);
        Map<String, String> params = new HashMap<>();
        params.put("barCode", allCode);
        httpDto.setParams(params);
        mPresenter.getData(httpDto);
    }

    private void exit() {
        if ((System.currentTimeMillis() - mExitTime) > 3000) {
            showToast("再按一次退出");
            mExitTime = System.currentTimeMillis();

        } else {
            finish();
            MyApplication.instance.exitApp();
        }
    }


    //aibee鉴权
    public void applyFaceService(){

        AibeeAuth.getsInstance().authByServer(getApplicationContext(),
                Constraint.SdkKey,Constraint.SdkSecret,new AuthCallBack(MainActivity.this));
    }

    public static class AuthCallBack implements AibeeAuth.AuthResultCallbck{

        WeakReference<MainActivity> weakReference;

        public AuthCallBack(MainActivity activity){

            weakReference = new WeakReference<MainActivity>(activity);

        }
        @Override
        public void onSuccess() {

            MainActivity mainActivity = weakReference.get();
            mainActivity.myApplication.isFaceAuthSuccess = true;
            LogUtils.d("鉴权成功");
        }

        @Override
        public void onFail(AibeeAuth.AuthResult authResult) {

            MainActivity mainActivity = weakReference.get();
            mainActivity.myApplication.isFaceAuthSuccess = false;

            if (mainActivity !=null){

                if (!mainActivity.isFinishing()){

                    mainActivity.showWarnDialog("人脸鉴权失败");

                }
                LogUtils.d("人脸鉴权失败"+authResult.toString());
            }
        }
    }

}
