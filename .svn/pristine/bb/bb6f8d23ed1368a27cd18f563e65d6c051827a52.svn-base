package com.sendinfo.facestandard.linetake.util.other;

import android.graphics.Point;
import android.hardware.Camera;
import android.util.DisplayMetrics;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

/**
 * Created by admin on 2018-05-15.
 */

public class CameraUtil {
    private static final int MIN_PREVIEW_PIXELS = 480 * 320;
    private static final double MAX_ASPECT_DISTORTION = 0.15;
    private static final String TAG = "HJ";

    public static Camera getCameraInstance(int w, int h, int i) {
        Camera c = null;
        try {
            c = Camera.open(i);
            Camera.Parameters parameters = c.getParameters();
            parameters.setPreviewSize(w, h);
            parameters.setPictureSize(w, h);
            c.setParameters(parameters);
            c.setParameters(parameters);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        return c;
    }

    public static Camera getCameraInstance(DisplayMetrics mDisplayMetrics,int i) {
        Camera c = null;
        try {
            c = Camera.open(i);
            Camera.Parameters parameters = c.getParameters();
            Point cameraResolution = findBestPreviewResolution(c, mDisplayMetrics);
            parameters.setPreviewSize(cameraResolution.x, cameraResolution.y);
            Point bestPictureResolution = findBestPictureResolution(c, mDisplayMetrics);
            parameters.setPictureSize(bestPictureResolution.x, bestPictureResolution.y);
            c.setParameters(parameters);
            c.setParameters(parameters);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        return c;
    }

    private static Point findBestPreviewResolution(Camera mCamera, DisplayMetrics mDisplayMetrics) {
        if (mCamera == null) {
            return null;
        }
        Camera.Parameters parameters = mCamera.getParameters();
        Camera.Size defaultPreviewResolution = parameters.getPreviewSize();
        Log.d(TAG, "camera default resolution " + defaultPreviewResolution.width + "x" + defaultPreviewResolution.height);

        List<Camera.Size> rawSupportedSizes = parameters.getSupportedPreviewSizes();
        if (rawSupportedSizes == null) {
            Log.w(TAG, "Device returned no supported preview sizes; using default");
            return new Point(defaultPreviewResolution.width, defaultPreviewResolution.height);
        }

        List<Camera.Size> supportedPreviewResolutions = new ArrayList<Camera.Size>(rawSupportedSizes);
        Collections.sort(supportedPreviewResolutions, new Comparator<Camera.Size>() {
            @Override
            public int compare(Camera.Size a, Camera.Size b) {
                int aPixels = a.height * a.width;
                int bPixels = b.height * b.width;
                if (bPixels < aPixels) {
                    return -1;
                }
                if (bPixels > aPixels) {
                    return 1;
                }
                return 0;
            }
        });

        StringBuilder previewResolutionSb = new StringBuilder();
        for (Camera.Size supportedPreviewResolution : supportedPreviewResolutions) {
            previewResolutionSb.append(supportedPreviewResolution.width).append('x').append(supportedPreviewResolution.height)
                    .append(' ');
        }
        Log.v(TAG, "Supported preview resolutions: " + previewResolutionSb);


        double screenAspectRatio = (double) mDisplayMetrics.widthPixels / (double) mDisplayMetrics.heightPixels;
        Iterator<Camera.Size> it = supportedPreviewResolutions.iterator();
        while (it.hasNext()) {
            Camera.Size supportedPreviewResolution = it.next();
            int width = supportedPreviewResolution.width;
            int height = supportedPreviewResolution.height;


            if (width * height < MIN_PREVIEW_PIXELS) {
                it.remove();
                continue;
            }

            boolean isCandidatePortrait = width > height;
            int maybeFlippedWidth = isCandidatePortrait ? height : width;
            int maybeFlippedHeight = isCandidatePortrait ? width : height;
            double aspectRatio = (double) maybeFlippedWidth / (double) maybeFlippedHeight;
            double distortion = Math.abs(aspectRatio - screenAspectRatio);
            if (distortion > MAX_ASPECT_DISTORTION) {
                it.remove();
                continue;
            }


            if (maybeFlippedWidth == mDisplayMetrics.widthPixels && maybeFlippedHeight == mDisplayMetrics.heightPixels) {
                Point exactPoint = new Point(width, height);
                Log.d(TAG, "found preview resolution exactly matching screen resolutions: " + exactPoint);

                return exactPoint;
            }
        }


        if (!supportedPreviewResolutions.isEmpty()) {
            Camera.Size largestPreview = supportedPreviewResolutions.get(0);
            Point largestSize = new Point(largestPreview.width, largestPreview.height);
            Log.d(TAG, "using largest suitable preview resolution: " + largestSize);
            return largestSize;
        }


        Point defaultResolution = new Point(defaultPreviewResolution.width, defaultPreviewResolution.height);
        Log.d(TAG, "No suitable preview resolutions, using default: " + defaultResolution);

        return defaultResolution;
    }

    private static Point findBestPictureResolution(Camera mCamera, DisplayMetrics mDisplayMetrics) {

        if (mCamera == null) {
            return null;
        }
        Camera.Parameters parameters = mCamera.getParameters();
        List<Camera.Size> supportedPicResolutions = parameters
                .getSupportedPictureSizes();

        StringBuilder picResolutionSb = new StringBuilder();
        for (Camera.Size supportedPicResolution : supportedPicResolutions) {
            picResolutionSb.append(supportedPicResolution.width).append('x').append(supportedPicResolution.height).append(" ");
        }
        Log.d(TAG, "Supported picture resolutions: " + picResolutionSb);

        Camera.Size defaultPictureResolution = parameters.getPictureSize();
        Log.d(TAG, "default picture resolution " + defaultPictureResolution.width + "x" + defaultPictureResolution.height);


        List<Camera.Size> sortedSupportedPicResolutions = new ArrayList<Camera.Size>(supportedPicResolutions);
        Collections.sort(sortedSupportedPicResolutions, new Comparator<Camera.Size>() {
            @Override
            public int compare(Camera.Size a, Camera.Size b) {
                int aPixels = a.height * a.width;
                int bPixels = b.height * b.width;
                if (bPixels < aPixels) {
                    return -1;
                }
                if (bPixels > aPixels) {
                    return 1;
                }
                return 0;
            }
        });


        double screenAspectRatio = (double) mDisplayMetrics.widthPixels / (double) mDisplayMetrics.heightPixels;
        Iterator<Camera.Size> it = sortedSupportedPicResolutions.iterator();
        while (it.hasNext()) {
            Camera.Size supportedPreviewResolution = it.next();
            int width = supportedPreviewResolution.width;
            int height = supportedPreviewResolution.height;

            boolean isCandidatePortrait = width > height;
            int maybeFlippedWidth = isCandidatePortrait ? height : width;
            int maybeFlippedHeight = isCandidatePortrait ? width : height;
            double aspectRatio = (double) maybeFlippedWidth / (double) maybeFlippedHeight;
            double distortion = Math.abs(aspectRatio - screenAspectRatio);
            if (distortion > MAX_ASPECT_DISTORTION) {
                it.remove();
                continue;
            }
        }


        if (!sortedSupportedPicResolutions.isEmpty()) {
            Camera.Size largestPreview = sortedSupportedPicResolutions.get(0);
            Point largestSize = new Point(largestPreview.width, largestPreview.height);
            Log.d(TAG, "using largest suitable picture resolution: " + largestSize);
            return largestSize;
        }


        Point defaultResolution = new Point(defaultPictureResolution.width, defaultPictureResolution.height);
        Log.d(TAG, "No suitable picture resolutions, using default: " + defaultResolution);

        return defaultResolution;
    }

}
