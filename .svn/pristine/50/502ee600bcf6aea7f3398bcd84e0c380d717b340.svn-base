package com.sendinfo.facestandard.linetake.module.common;

import android.content.Intent;
import android.graphics.SurfaceTexture;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.TextureView;

import com.blankj.utilcode.util.SPUtils;
import com.blankj.utilcode.util.ToastUtils;
import com.google.gson.reflect.TypeToken;
import com.sendinfo.facestandard.linetake.R;
import com.sendinfo.facestandard.linetake.base.BaseMVPActivity;
import com.sendinfo.facestandard.linetake.bean.DataResponse;
import com.sendinfo.facestandard.linetake.bean.TicketM;
import com.sendinfo.facestandard.linetake.module.MainActivity;
import com.sendinfo.facestandard.linetake.module.TicketDetailActivity;
import com.sendinfo.facestandard.linetake.mvp.BaseResponse;
import com.sendinfo.facestandard.linetake.mvp.CommonP;
import com.sendinfo.facestandard.linetake.mvp.HttpDto;
import com.sendinfo.facestandard.linetake.mvp.ICommonView;
import com.sendinfo.facestandard.linetake.util.Constraint;
import com.sendinfo.facestandard.linetake.util.JsonUtil.JsonUtil;
import com.sendinfo.facestandard.linetake.util.other.EventBusFactory;
import com.sendinfo.loglib.LogUtil;
import com.sendinfo.loglib.database.LogLevel;
import com.sendinfo.loglib.database.LogMessage;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import cn.simonlee.xcodescanner.core.CameraScanner;
import cn.simonlee.xcodescanner.core.GraphicDecoder;
import cn.simonlee.xcodescanner.core.OldCameraScanner;
import cn.simonlee.xcodescanner.core.ZBarDecoder;
import cn.simonlee.xcodescanner.view.AdjustTextureView;
import cn.simonlee.xcodescanner.view.ScannerFrameView;

public class ScanActivity extends BaseMVPActivity<CommonP>
        implements TextureView.SurfaceTextureListener,CameraScanner.CameraListener,
        GraphicDecoder.DecodeListener,ICommonView {


    private CameraScanner mCameraScanner;
    private ScannerFrameView mScannerFrameView;
    protected GraphicDecoder mGraphicDecoder;

    private AdjustTextureView mTextureView;
    protected String TAG = "XCodeScanner";
    private String allCode;

    @Override
    protected void initArgs(Intent intent) {

    }

    @Override
    protected void initView() {


        mPresenter = new CommonP(this);
        mTextureView = findViewById(R.id.textureview);
        mTextureView.setSurfaceTextureListener(this);
        mScannerFrameView = findViewById(R.id.scannerframe);

        /*
         * 注意，SDK21的设备是可以使用NewCameraScanner的，但是可能存在对新API支持不够的情况，比如红米Note3（双网通Android5.0.2）
         * 开发者可自行配置使用规则，比如针对某设备型号过滤，或者针对某SDK版本过滤
         * */
        mCameraScanner = OldCameraScanner.getInstance();


        mCameraScanner.setCameraListener(this);
        mTextureView.setSurfaceTextureListener(this);
    }

    @Override
    protected void initData() {

    }

    @Override
    protected int getLayoutId() {
        return R.layout.activity_scan;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    protected void onRestart() {
        Log.d(TAG, getClass().getName() + ".onRestart()");
        if (mTextureView.isAvailable()) {
            //部分机型转到后台不会走onSurfaceTextureDestroyed()，因此isAvailable()一直为true，转到前台后不会再调用onSurfaceTextureAvailable()
            //因此需要手动开启相机
            mCameraScanner.setSurfaceTexture(mTextureView.getSurfaceTexture());
            mCameraScanner.setPreviewSize(mTextureView.getWidth(), mTextureView.getHeight());
            mCameraScanner.openCamera(this.getApplicationContext());
        }
        super.onRestart();
    }

    @Override
    protected void onPause() {
        Log.d(TAG, getClass().getName() + ".onPause()");
        mCameraScanner.closeCamera();
        super.onPause();
    }

    @Override
    public void onDestroy() {
        Log.d(TAG, getClass().getName() + ".onDestroy()");
        mCameraScanner.setGraphicDecoder(null);
        if (mGraphicDecoder != null) {
            mGraphicDecoder.setDecodeListener(null);
            mGraphicDecoder.detach();
        }
        mCameraScanner.detach();
        super.onDestroy();
    }

    @Override
    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {

        Log.e(TAG, getClass().getName() + ".onSurfaceTextureAvailable() width = " + width + " , height = " + height);
        mCameraScanner.setSurfaceTexture(surface);
        mCameraScanner.setPreviewSize(width, height);
        mCameraScanner.openCamera(this.getApplicationContext());
    }

    @Override
    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {

    }

    @Override
    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
        return true;
    }

    @Override
    public void onSurfaceTextureUpdated(SurfaceTexture surface) {

    }

    @Override
    public void openCameraSuccess(int frameWidth, int frameHeight, int frameDegree) {

        Log.e(TAG, getClass().getName() + ".openCameraSuccess() frameWidth = " + frameWidth + " , frameHeight = " + frameHeight + " , frameDegree = " + frameDegree);
        mTextureView.setImageFrameMatrix(frameWidth, frameHeight, frameDegree);
        if (mGraphicDecoder == null) {
            mGraphicDecoder = new ZBarDecoder();//使用带参构造方法可指定条码识别的格式
            mGraphicDecoder.setDecodeListener(this);
        }
        //该区域坐标为相对于父容器的左上角顶点。
        //TODO 应考虑TextureView与ScannerFrameView的Margin与padding的情况
        mCameraScanner.setFrameRect(mScannerFrameView.getLeft(), mScannerFrameView.getTop(), mScannerFrameView.getRight(), mScannerFrameView.getBottom());
        mCameraScanner.setGraphicDecoder(mGraphicDecoder);

    }


    @Override
    public void openCameraError() {

    }

    @Override
    public void noCameraPermission() {

    }

    @Override
    public void cameraDisconnected() {

    }

    int mCount = 0;
    String mResult = null;
    @Override
    public void decodeComplete(String result, int type, int quality, int requestCode) {
        if (result == null) return;
        if (result.equals(mResult)) {
            if (++mCount > 3) {//连续四次相同则显示结果（主要过滤脏数据，也可以根据条码类型自定义规则）
                if (quality < 10) {
                    ToastUtils.showShort("[类型" + type + "/精度00" + quality + "]" + result);
                } else if (quality < 100) {
                    ToastUtils.showShort("[类型" + type + "/精度0" + quality + "]" + result);
                } else {
                    ToastUtils.showShort("[类型" + type + "/精度" + quality + "]" + result);
                }
            }
        } else {

            mCount = 1;
            mResult = result;
            allCode = result;

        }
        Log.d(TAG, getClass().getName() + ".decodeComplete() -> " + mResult);

        LogUtil.add(new LogMessage(LogLevel.V,mResult,"扫码结果",""));


        if (mResult.startsWith("ZT")){

            allCode = mResult.substring(0,mResult.length()-2);

        }else {

            allCode = mResult;
            mResult = mResult.substring(0,mResult.length()-2);

        }


        Intent intent = new Intent();
        intent.putExtra("barCode",mResult);
        intent.putExtra("allCode",allCode);
        ScanActivity.this.setResult(200,intent);
        finish();

    }

    private void sendRequest(){


    }

    @Override
    public void Success(BaseResponse response) {


    }
}
