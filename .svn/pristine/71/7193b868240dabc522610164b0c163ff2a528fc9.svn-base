package com.sendinfo.facestandard.linetake.util.string;

import com.sendinfo.facestandard.linetake.util.klog.KLog;

import java.io.UnsupportedEncodingException;

/**
 * 作者: 赵小白 email:edisonzsw@icloud.com 
 * 日期: 2018/1/11 10:48 
 * 修改人：
 * 修改时间：
 * 修改备注：
 */
public class ByteUtils
{
	public static String bytesToString(byte[] bytes)
	{
		String string = "";
		for (byte b : bytes)
		{
			String item = Integer.toHexString(b & 0xff);
			if (item.length() == 1)
			{
				item = "0" + item;
			}
			string += item;
		}
		KLog.d(string);
		return string.toLowerCase();
	}

	public static byte[] StringToBytes(String string)
	{
		string = string.toLowerCase();
		byte[] bytes = new byte[string.length() / 2];
		for (int i = 0; i < bytes.length; i++)
		{
			try
			{
				bytes[i] = (byte) (0xff & Integer.parseInt(
					string.substring(i * 2, i * 2 + 2), 16));
			} catch (Exception e)
			{
				e.printStackTrace();
			}
		}
		return bytes;
	}

	/**
	 * 合并两个byte[]
	 */
	public static byte[] addBytes(byte[] data1, byte[] data2)
	{
		byte[] data3 = new byte[data1.length+data2.length];
		System.arraycopy(data1, 0, data3, 0, data1.length);
		System.arraycopy(data2, 0, data3, data1.length, data2.length);
		return data3;
	}

	/**
	 * 返回内容
	 */
	public static String getData(byte[] bytes)
	{
		String string = "";
		int start = 0;
		int end = bytes.length;

		byte[] by = new byte[end - start];

		for (int i = start, j = 0; i < end; i++, j++)
		{
			by[j] = bytes[i];
		}
		try
		{
			string = new String(by, "GBK");
		}
		catch (UnsupportedEncodingException e)
		{
			e.printStackTrace();
		}
		return string;
	}

	/**
	 * 返回内容
	 */
	public static String getData(byte[] bytes, int start, int end)
	{
		String string = "";
		byte[] by = new byte[end - start];

		for (int i = start, j = 0; i < end; i++, j++)
		{
			by[j] = bytes[i];
		}
		try
		{
			string = new String(by, "GBK");
		}
		catch (UnsupportedEncodingException e)
		{
			e.printStackTrace();
		}
		return string;
	}

	/**
	 * 返回十六进制
	 */
	public static String getContent(byte[] bytes)
	{
		String string = "";
		for (int j = 0; j < bytes.length; j++)
		{
			int count = (int) bytes[j];
			if (count < 0)
			{
				count = count + 256;
			}
			if (count <= 15)
			{
				string += "0";
			}
			string += Integer.toHexString(count) + " ";
		}
		return string;
	}

	/**
	 * 返回十六进制
	 */
	public static String getContentNoBlank(byte[] bytes)
	{
		String string = "";
		for (int j = 0; j < bytes.length; j++)
		{
			int count = (int) bytes[j];
			if (count < 0)
			{
				count = count + 256;
			}
			if (count <= 15)
			{
				string += "0";
			}
			string += Integer.toHexString(count);
		}
		return string;
	}

	/**
	 * 返回十六进制
	 */
	public static String getContentNoBlank(byte[] bytes, int start, int end)
	{
		String string = "";
		for (int j = start; j < end; j++)
		{
			// 超界
			int count = (int) bytes[j];
			if (count < 0)
			{
				count = count + 256;
			}
			if (count <= 15)
			{
				string += "0";
			}
			string += Integer.toHexString(count);
		}
		return string;
	}
}
