package com.sendinfo.facestandard.linetake.base;

import android.content.Context;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.Toast;

import com.sendinfo.facestandard.linetake.mvp.IPresenter;
import com.sendinfo.facestandard.linetake.mvp.IView;
import com.sendinfo.facestandard.linetake.util.other.RxCountDown;
import com.sendinfo.facestandard.linetake.util.string.StringUtils;
import com.trello.rxlifecycle2.LifecycleTransformer;
import com.trello.rxlifecycle2.android.FragmentEvent;
import com.trello.rxlifecycle2.components.RxFragment;

import butterknife.ButterKnife;
import cn.pedant.SweetAlert.SweetAlertDialog;

/**
 * <pre>
 *     author : ghwang
 *     e-mail : 429329513@qq.com
 *     time   : 2018/05/18
 *     desc   :
 * </pre>
 */

public abstract class BaseMVPFragment<T extends IPresenter>
        extends RxFragment implements IView {


    // 将代理类通用行为抽出来
    protected T mPresenter;
    private LayoutInflater inflater;
    private InputMethodManager mInputMethodManager;
    private ViewGroup container;
    public View mView;
    private SweetAlertDialog alertDialog;


    protected abstract void initArgs(Bundle bundle);

    protected abstract void initView(Bundle bundle);

    protected abstract void initData();


    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {


        this.inflater = inflater;
        this.container = container;
        mInputMethodManager =
                (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
        alertDialog = new SweetAlertDialog(getActivity());
        alertDialog.setCancelable(false);
        try
        {
            initArgs(getArguments());
            initView(savedInstanceState);
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        return mView;
    }

    @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState)
    {
        initData();
        super.onViewCreated(view, savedInstanceState);
    }

    //子类重写
    protected void setContentView(int layout)
    {
        mView = inflater.inflate(layout, container, false);
        ButterKnife.bind(this,mView);
    }
    @Override public void onResume()
    {
        super.onResume();
        if (mPresenter != null)
        {
            mPresenter.onResume();
        }
    }

    @Override public void onPause()
    {
        super.onPause();
    }

    @Override public void onDestroyView()
    {
        if (alertDialog != null && alertDialog.isShowing())
        {
            alertDialog.dismiss();
            alertDialog = null;
        }

        //EventBus.getDefault().unregister(this);
        super.onDestroyView();
        ViewGroup parent = (ViewGroup) mView.getParent();
        if (null != parent)
        {
            parent.removeView(mView);
        }
    }

    @Override public void onDestroy()
    {
        super.onDestroy();
        if (mPresenter != null)
        {
            mPresenter.onDestroy();
        }

    }

    @Override
    public void onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);

    }

    //IView

    @Override
    public void showToast(String msg) {

        if (!StringUtils.isBlank(msg))
        {
            Toast.makeText(getActivity(), msg, Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void showProgressDialog() {

        if (alertDialog != null && alertDialog.isShowing()){

            alertDialog.setTitleText("正在加载中");
            alertDialog.getProgressHelper().setBarColor(Color.parseColor("#A5DC86"));
            alertDialog.setCancelable(false);
            alertDialog.changeAlertType(SweetAlertDialog.PROGRESS_TYPE);

        }else {

            alertDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);
            alertDialog.getProgressHelper().setBarColor(Color.parseColor("#A5DC86"));
            alertDialog.setTitleText("正在加载中");
            alertDialog.setCancelable(false);
            alertDialog.show();
        }
        //超过20秒强制dismiss
        RxCountDown.fire(20, count -> {

            if (count==0){

                if (null != alertDialog){

                    alertDialog.dismiss();
                    alertDialog = null;
                }
            }
        });

    }


    @Override
    public void showDialog(String msg) {

        if (alertDialog !=null && alertDialog.isShowing()){

            alertDialog.setTitle(msg);
            alertDialog.changeAlertType(SweetAlertDialog.NORMAL_TYPE);

        }else {

            alertDialog = new SweetAlertDialog(getActivity())
                    .setTitleText(msg);
            alertDialog.show();
        }

    }

    @Override
    public void showDialog(String title, String content) {

        if (alertDialog !=null && alertDialog.isShowing()){

            alertDialog.setTitle(title);
            alertDialog.setContentText(content);
            alertDialog.changeAlertType(SweetAlertDialog.NORMAL_TYPE);

        }else {

            alertDialog = new SweetAlertDialog(getActivity())
                    .setTitleText(title)
                    .setContentText(content);
            alertDialog.show();
        }


    }

    @Override
    public void showErrorDialog(String content) {

        if (alertDialog !=null && alertDialog.isShowing()){

            alertDialog.setContentText(content);
            alertDialog.changeAlertType(SweetAlertDialog.ERROR_TYPE);


        }else {

            alertDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.ERROR_TYPE)
                    .setContentText(content);

            alertDialog.show();
        }


    }

    @Override
    public void showSuccessDialog(String content) {

        if (alertDialog !=null && alertDialog.isShowing()){

            alertDialog.setContentText(content);
            alertDialog.setConfirmText("确定");
            alertDialog.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);



        }else {

            alertDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.SUCCESS_TYPE)
                    .setContentText(content)
                    .setConfirmText("确定");

            alertDialog.show();
        }

    }


    @Override
    public void dismissDialog() {


        if (alertDialog != null){

            alertDialog.dismiss();
        }
    }

    @Override
    public LifecycleTransformer<Object> bindLifeCycle() {
        return this.bindUntilEvent(FragmentEvent.DESTROY);
    }

    private static long mLastClickTime;
    public static final int MIN_CLICK_DELAY_TIME = 500;

    @Override
    public boolean isFastClick()
    {
        // 当前时间
        long currentTime = System.currentTimeMillis();
        // 两次点击的时间差
        long time = currentTime-mLastClickTime;
        if(0 < time && time < MIN_CLICK_DELAY_TIME)
        {
            return true;
        }
        mLastClickTime = currentTime;
        return false;
    }

    @Override
    public void showKeyBoard(EditText editText) {

        mInputMethodManager.showSoftInput(editText, InputMethodManager.SHOW_IMPLICIT);

    }
    /**
     * 隐藏键盘
     */

    @Override
    public void hideKeyBoard() {

        try
        {
            mInputMethodManager
                    .hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(),
                            InputMethodManager.HIDE_NOT_ALWAYS);
        } catch (Exception ignored)
        {
        }
    }
}
